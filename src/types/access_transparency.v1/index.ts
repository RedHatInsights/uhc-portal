/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/access_transparency/v1/access_protection': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the status of Access Protection determined by the Organization id, Subscription id or Cluster id. */
    get: {
      parameters: {
        query?: {
          /** @description The OCM Organization id to check Access Protection status for. */
          organizationId?: components['parameters']['organizationId'];
          /** @description The Subscription id to check Access Protection status for. */
          subscriptionId?: components['parameters']['subscriptionId'];
          /** @description The Cluster id to check Access Protection status for. */
          clusterId?: components['parameters']['clusterId'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An Access Protection object */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccessProtection'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/access_transparency/v1/access_requests': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of Access Requests */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username
           *     starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     subscription_labels.key = 'foo' and subscription_labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     Parameters 'orderBy' and 'order' are mutually exclusive. If both
           *     parameters aren't provided, or if the values are empty, then no
           *     explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     Parameters 'orderBy' and 'order' are mutually exclusive. If both
           *     parameters aren't provided, or if the values are empty, then no
           *     explicit ordering will be applied. */
          order?: components['parameters']['order'];
          /** @description Supplies a comma-separated list of fields to be returned.
           *     Fields of sub-structures and of arrays use <structure>.<field> notation.
           *     <stucture>.* means all field of a structure
           *     Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)
           *
           *     ```
           *     ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
           *     ``` */
          fields?: components['parameters']['fields'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of Access Request objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccessRequestList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new Access Request */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description AccessRequest data */
      requestBody: {
        content: {
          'application/json': components['schemas']['AccessRequestPostRequest'];
        };
      };
      responses: {
        /** @description The Access Request was successfully created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccessRequest'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An Access Request in either Pending or Approved status already exists for the given Cluster/Subscription id */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the Access Request */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/access_transparency/v1/access_requests/{access_request_id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the Access Request */
        access_request_id: components['parameters']['access_request_id'];
      };
      cookie?: never;
    };
    /** Get an Access Request by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of the Access Request */
          access_request_id: components['parameters']['access_request_id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Access Request found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccessRequest'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No Access Request with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/access_transparency/v1/access_requests/{access_request_id}/decisions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of Decisions for a given Access Request */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username
           *     starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     subscription_labels.key = 'foo' and subscription_labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     Parameters 'orderBy' and 'order' are mutually exclusive. If both
           *     parameters aren't provided, or if the values are empty, then no
           *     explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     Parameters 'orderBy' and 'order' are mutually exclusive. If both
           *     parameters aren't provided, or if the values are empty, then no
           *     explicit ordering will be applied. */
          order?: components['parameters']['order'];
          /** @description Supplies a comma-separated list of fields to be returned.
           *     Fields of sub-structures and of arrays use <structure>.<field> notation.
           *     <stucture>.* means all field of a structure
           *     Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)
           *
           *     ```
           *     ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
           *     ``` */
          fields?: components['parameters']['fields'];
        };
        header?: never;
        path: {
          /** @description The id of the Access Request */
          access_request_id: components['parameters']['access_request_id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of Decision objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['DecisionList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description The Access Request with the specified id does not exist */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new Decision for a given Access Request */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of the Access Request */
          access_request_id: components['parameters']['access_request_id'];
        };
        cookie?: never;
      };
      /** @description Decision data */
      requestBody: {
        content: {
          'application/json': components['schemas']['Decision'];
        };
      };
      responses: {
        /** @description The Decision was successfully created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Decision'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the Decision */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/access_transparency/v1/access_requests/{access_request_id}/decisions/{decision_id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the Access Request */
        access_request_id: components['parameters']['access_request_id'];
        /** @description The decision id of record */
        decision_id: components['parameters']['decision_id'];
      };
      cookie?: never;
    };
    /** Get a Decision by id for a given Access Request */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of the Access Request */
          access_request_id: components['parameters']['access_request_id'];
          /** @description The decision id of record */
          decision_id: components['parameters']['decision_id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Decision found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Decision'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No Decision with the specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AccessProtection: components['schemas']['ObjectReference'] & {
      /** @description Boolean indicating whether Access Protection is enabled. True if enabled, false otherwise. */
      enabled?: boolean;
    };
    AccessRequest: components['schemas']['ObjectReference'] & {
      /** @description The id of the Cluster associated with this Access Request */
      cluster_id?: string;
      /**
       * @description The amount of time the customer has to respond to this Access Request
       * @example 9h2m3s
       */
      deadline?: string;
      /**
       * Format: date-time
       * @description The timestamp of the time by which the customer must respond to this Access Request
       */
      deadline_at?: string;
      /** @description The list of Decisions for this Access Request */
      decisions?: components['schemas']['Decision'][];
      /**
       * @description The amount of time being requested for access to the customers Cluster or Cloud Provider account
       * @example 9h2m3s
       */
      duration?: string;
      /** @description The Jira ticket associated with this Access Request in the form 'OHSS-1234'. */
      internal_support_case_id?: string;
      /** @description A customer-readable explanation as to why access is required to their Cluster or Cloud Provider account */
      justification?: string;
      /** @description The id of the OCM Organization associated with this Access Request */
      organization_id?: string;
      /** @description The username of the individual that made this Access Request */
      requested_by?: string;
      /** @description The status of this Access Request */
      status?: {
        /**
         * Format: date-time
         * @description The timestamp at which approved access expires for this Access Request
         */
        expires_at?: string;
        /**
         * @description The current state of this Access Request
         * @default Pending
         * @enum {string}
         */
        state: AccessRequestStatusState;
      };
      /** @description The id of the Subscription associated with this Access Request */
      subscription_id?: string;
      /** @description An optional, customer-facing support case id associated with this Access Request */
      support_case_id?: string;
    };
    AccessRequestList: components['schemas']['List'] & {
      items?: components['schemas']['AccessRequest'][];
    };
    AccessRequestPostRequest: {
      /** @description The Cluster id associated with this Access Request. Not required when supplying the Subscription id. */
      cluster_id?: string;
      /**
       * @description The amount of time the customer has to respond to this Access Request
       * @default 72h
       * @example 9h2m3s
       */
      deadline: string;
      /**
       * @description The amount of time being requested for access to the customers Cluster or Cloud Provider account
       * @default 8h
       * @example 9h2m3s
       */
      duration: string;
      /** @description The Jira ticket associated with this Access Request in the form 'OHSS-1234'. This must exist prior to submitting this Access Request */
      internal_support_case_id: string;
      /** @description A customer-readable explanation as to why access is required to their Cluster or Cloud Provider account */
      justification: string;
      /** @description The Subscription id associated with this Access Request. Not required when supplying the Cluster id. */
      subscription_id?: string;
      /** @description An optional, customer-facing support case id associated with this Access Request */
      support_case_id?: string;
    };
    Decision: components['schemas']['ObjectReference'] & {
      /** @description The username of the individual that made this Decision */
      decided_by?: string;
      /**
       * @description The Decision made
       * @enum {string}
       */
      decision?: DecisionDecision;
      /** @description A human-readable explanation as to why this Decision was made. Optional for Approved Decisions. */
      justification?: string;
    };
    DecisionList: components['schemas']['List'] & {
      items?: components['schemas']['Decision'][];
    };
    Error: components['schemas']['ObjectReference'] & {
      code?: string;
      operation_id?: string;
      reason?: string;
    };
    ErrorList: components['schemas']['List'] & {
      items?: components['schemas']['Error'][];
    };
    List: {
      kind: string;
      page: number;
      size: number;
      total: number;
    };
    ObjectReference: {
      /** Format: date-time */
      created_at?: string;
      href?: string;
      id?: string;
      kind?: string;
      /** Format: date-time */
      updated_at?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description The id of the Access Request */
    access_request_id: string;
    /** @description The Cluster id to check Access Protection status for. */
    clusterId: string;
    /** @description The decision id of record */
    decision_id: string;
    /** @description Supplies a comma-separated list of fields to be returned.
     *     Fields of sub-structures and of arrays use <structure>.<field> notation.
     *     <stucture>.* means all field of a structure
     *     Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)
     *
     *     ```
     *     ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
     *     ``` */
    fields: string;
    /** @description Specifies the order by criteria. The syntax of this parameter is
     *     similar to the syntax of the _order by_ clause of an SQL statement,
     *     but using the names of the json attributes / column of the account.
     *     For example, in order to retrieve all accounts ordered by username:
     *
     *     ```sql
     *     username asc
     *     ```
     *
     *     Or in order to retrieve all accounts ordered by username _and_ first name:
     *
     *     ```sql
     *     username asc, firstName asc
     *     ```
     *
     *     Parameters 'orderBy' and 'order' are mutually exclusive. If both
     *     parameters aren't provided, or if the values are empty, then no
     *     explicit ordering will be applied. */
    order: string;
    /** @description Specifies the order by criteria. The syntax of this parameter is
     *     similar to the syntax of the _order by_ clause of an SQL statement,
     *     but using the names of the json attributes / column of the account.
     *     For example, in order to retrieve all accounts ordered by username:
     *
     *     ```sql
     *     username asc
     *     ```
     *
     *     Or in order to retrieve all accounts ordered by username _and_ first name:
     *
     *     ```sql
     *     username asc, firstName asc
     *     ```
     *
     *     Parameters 'orderBy' and 'order' are mutually exclusive. If both
     *     parameters aren't provided, or if the values are empty, then no
     *     explicit ordering will be applied. */
    orderBy: string;
    /** @description The OCM Organization id to check Access Protection status for. */
    organizationId: string;
    /** @description Page number of record list when record list exceeds specified page size */
    page: number;
    /** @description Specifies the search criteria. The syntax of this parameter is
     *     similar to the syntax of the _where_ clause of an SQL statement,
     *     using the names of the json attributes / column names of the account.
     *     For example, in order to retrieve all the accounts with a username
     *     starting with `my`:
     *
     *     ```sql
     *     username like 'my%'
     *     ```
     *
     *     The search criteria can also be applied on related resource.
     *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
     *
     *     ```sql
     *     subscription_labels.key = 'foo' and subscription_labels.value = 'bar'
     *     ```
     *
     *     If the parameter isn't provided, or if the value is empty, then
     *     all the accounts that the user has permission to see will be
     *     returned. */
    search: string;
    /** @description Maximum number of records to return */
    size: number;
    /** @description The Subscription id to check Access Protection status for. */
    subscriptionId: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type AccessProtection = components['schemas']['AccessProtection'];
export type AccessRequest = components['schemas']['AccessRequest'];
export type AccessRequestList = components['schemas']['AccessRequestList'];
export type AccessRequestPostRequest = components['schemas']['AccessRequestPostRequest'];
export type Decision = components['schemas']['Decision'];
export type DecisionList = components['schemas']['DecisionList'];
export type Error = components['schemas']['Error'];
export type ErrorList = components['schemas']['ErrorList'];
export type List = components['schemas']['List'];
export type ObjectReference = components['schemas']['ObjectReference'];
export type ParameterAccessRequestId = components['parameters']['access_request_id'];
export type ParameterClusterId = components['parameters']['clusterId'];
export type ParameterDecisionId = components['parameters']['decision_id'];
export type ParameterFields = components['parameters']['fields'];
export type ParameterOrder = components['parameters']['order'];
export type ParameterOrderBy = components['parameters']['orderBy'];
export type ParameterOrganizationId = components['parameters']['organizationId'];
export type ParameterPage = components['parameters']['page'];
export type ParameterSearch = components['parameters']['search'];
export type ParameterSize = components['parameters']['size'];
export type ParameterSubscriptionId = components['parameters']['subscriptionId'];
export type $defs = Record<string, never>;
export enum AccessRequestStatusState {
  Pending = 'Pending',
  Denied = 'Denied',
  Approved = 'Approved',
  Expired = 'Expired',
}
export enum DecisionDecision {
  Approved = 'Approved',
  Denied = 'Denied',
  Expired = 'Expired',
}
export type operations = Record<string, never>;
