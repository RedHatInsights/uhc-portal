/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/clusters/reports': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Returns the latest reports for the given list of clusters.
     * @description Reports that are going to be returned are specified by list of cluster IDs that is part of request body.
     */
    post: operations['getReportsForClustersPost'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clusters/{clusterId}/report': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns the latest insights report for a cluster.
     * @description The report is specified by the cluster ID from params and information about the org_id and user_id is taken from the token. The latest report available for the given combination will be returned.
     */
    get: operations['getReportForCluster'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clusters/{clusterId}/report/info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns metainformations about the latest report for the given cluster.
     * @description The report is specified by the cluster ID. Metainformation about the latest report available for the given combination will be returned.
     */
    get: operations['getReportMetainfoForCluster'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clusters/{clusterId}/rules/{ruleIdAndErrorKey}/report': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns the latest single rule report for a cluster that contains information and content.
     * @description The rule is specified by the cluster ID and rule ID from params and information about the org_id and user_id is taken from the token. The latest rule report available for the given combination will be returned.
     */
    get: operations['getSingleReportForCluster'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clusters/{clusterId}/rules/{ruleId}/error_key/{errorKey}/disable': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Disables a rule/health check recommendation for specified cluster
     * @description Disables a rule (ruleId) for cluster (clusterId) for current organization/user
     */
    put: operations['disableRule'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clusters/{clusterId}/rules/{ruleId}/error_key/{errorKey}/disable_feedback': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Returns rule/health check's disable feedback
     * @description Returns rule/health check's disable feedback
     */
    post: operations['disableRuleFeedback'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clusters/{clusterId}/rules/{ruleId}/error_key/{errorKey}/dislike': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Puts dislike for the rule with cluster for current user
     * @description Puts dislike for the rule(ruleId) with cluster(clusterId) for current user(from auth token)
     */
    put: operations['addDislikeToRule'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clusters/{clusterId}/rules/{ruleId}/error_key/{errorKey}/enable': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Re-enables a rule/health check recommendation for specified cluster
     * @description Enables a rule (ruleId) for cluster (clusterId) for current organization/user
     */
    put: operations['enableRule'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clusters/{clusterId}/rules/{ruleId}/error_key/{errorKey}/like': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Puts like for the rule with cluster for current user
     * @description Puts like for the rule(ruleId) with cluster(clusterId) for current user(from auth token)
     */
    put: operations['addLikeToRule'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clusters/{clusterId}/rules/{ruleId}/error_key/{errorKey}/reset_vote': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Resets vote for the rule with cluster for current user
     * @description Resets vote for the rule(ruleId) with cluster(clusterId) for current user(from auth token)
     */
    put: operations['resetVoteForRule'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/clusters/{clusterList}/reports': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns the latest reports for the given list of clusters.
     * @description Reports that are going to be returned are specified by list of cluster IDs that is part of path.
     */
    get: operations['getReportsForClusters'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/content': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all static content
     * @description The static content is taken from the cache periodically updated from the content service
     */
    get: operations['getContent'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all rule groups and their relevant information
     * @description This simply redirects to an endpoint of the same name of a service called insights-content-service
     */
    get: operations['getRuleGroups'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns basic information about Smart Proxy, Insights Results Aggregator, and Content Service.
     * @description InfoEndpoint returns basic information about Smart Proxy, Insights Results Aggregator, and Content Service version, utils repository version, commit hash etc.
     */
    get: operations['InfoEndpoint'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/metrics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Read all metrics exposed by this service
     * @description Set of metrics provided by insights-operator-utils library providing total number of requests counter, API endpoints response times, and counter of HTTP status code responses. Additionally it is possible to consume all metrics provided by Go runtime. These metrics start with go_ and process_ prefixes.
     */
    get: operations['getMetrics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/openapi.json': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns the OpenAPI specification JSON.
     * @description The OpenAPI specification of this REST API service that is represented in formatted and human-readable JSON is available under this endpoint.
     */
    get: operations['getOpenApi'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/org_overview': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve an overview of rule hits affecting all clusters in an organization. Organization ID is retrieved from the auth token.
     * @description Retrieves an overview data about the clusters being hit by rules. The cluster list is retrieved from the AMS API. Takes into account managed clusters and rules, acknowledged rules as well as disabled clusters.
     */
    get: operations['getOverviewForOrganization'];
    put?: never;
    /**
     * DEPRACATED: Use GET instead. Retrieve an overview of rule hits affecting all clusters in an organization. Organization ID is retrieved from the auth token.
     * @description DEPRACATED: Use GET instead. Retrieves an overview data about the clusters being hit by rules. This method doesn't take into account managed clusters, rules that were acked or clusters that were disabled. For this functionality, use GET method.
     */
    post: operations['postOverviewForOrganization'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/organizations/{orgId}/clusters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns a list of clusters associated with the specified organization ID.
     * @description Returns a list of clusters, ie. cluster IDs, that are associated with the specified organization ID from the last 3 hours. For a complete list of clusters, please use API v2. Please note that there is 1:N organization to cluster mapping, ie. one cluster belongs exactly to one organization.
     */
    get: operations['getClustersForOrganization'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/rule_ids': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns the rule IDs of all the rules.
     * @description Returns a list of the names of the rules. Rule name consist of its ID represented as a string.
     */
    get: operations['getRuleIDs'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/rules/{ruleId}/content': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all static content for the given ruleId
     * @description The static content is taken from the cache periodically updated from the content service
     */
    get: operations['getContentForRule'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Format: uuid
     * @description ID of cluster in UUID format.
     */
    clusterId: string;
    overviewResponse: {
      overview?: {
        /**
         * @description Number of clusters with at least 1 Insights hit.
         * @example 1
         */
        clusters_hit?: number;
        hit_by_risk?: {
          [key: string]: number;
        };
        hit_by_tag?: {
          [key: string]: number;
        };
      };
      /** @example ok */
      status?: string;
    };
    /**
     * @description Array of ruleHit instances
     * @example {
     *       "created_at": "2020-04-08T00:42:00Z",
     *       "description": "Introducing Insights for Red Hat OpenShift Container Platform",
     *       "details": "Red Hat Insights for OpenShift is a proactive management solution. It provides ongoing infrastructure analyses of your Red Hat OpenShift Container Platform 4.2 and later installations. Red Hat Insights helps you identify, prioritize, and resolve risks to security, performance, availability, and stability before they become urgent issues.\nRed Hat Insights for OpenShift uses the Remote Health Monitoring feature of OpenShift 4. The health checks are created by Red Hat subject matter experts and assessed according to severity and impact.\nThis is an example  recommendation that you can safely ignore. To disable it, click  the triple-dot menu button next to the header, and select Disable.\n\n[Knowledgebase Article](https://access.redhat.com/search/#/knowledgebase)\n\n",
     *       "disable_feedback": "",
     *       "disabled": false,
     *       "disabled_at": "",
     *       "extra_data": {
     *         "error_key": "TUTORIAL_ERROR",
     *         "type": "rule"
     *       },
     *       "internal": false,
     *       "reason": "",
     *       "resolution": "",
     *       "rule_id": "ccx_rules_ocm.tutorial_rule.report",
     *       "tags": [
     *         "openshift",
     *         "service_availability"
     *       ],
     *       "total_risk": 1,
     *       "user_vote": 0
     *     }
     */
    reportData: {
      /** Format: date-time */
      created_at?: string;
      /** @description The title of the rule, a short description. */
      description?: string;
      /** @description Details of the rule - templates rendered on frontend. */
      details?: string;
      disable_feedback?: string;
      /** @description If this rule result disabled or not. This field can be used in the UI to show only specific set of rules results. */
      disabled?: boolean;
      disabled_at?: string;
      /** @description Used as templating data for other content (details, resolution, etc.), has varying structure depending on the rules in the report. */
      extra_data?: Record<string, never>;
      internal?: boolean;
      more_info?: string;
      /** @description Reason for the issue, giving the user more accurate description of the cause. */
      reason?: string;
      /** @description Resolution steps of the issue, possibly linking to a resolution article in the knowledge base. */
      resolution?: string;
      /** @description ID of a rule. */
      rule_id?: string;
      /** @description List of tags that the rule contains, forming rule groups. */
      tags?: string[];
      /**
       * @description Total risk - calculated from rule impact and likelihood.
       * @enum {integer}
       */
      total_risk?: ReportDataTotal_risk;
      /**
       * Format: int32
       * @description User vote - value of user voting. -1 is dislike vote, 0 is no vote, 1 is like vote.
       * @enum {integer}
       */
      user_vote?: ReportDataUser_vote;
    };
    reportsComponent: {
      component?: string;
      details?: Record<string, never>;
      info_id?: string;
      key?: string;
      links?: {
        [key: string]: string[];
      };
      rule_id?: string;
      tags?: string[];
      type?: string;
    };
    /** @description Reports for a set of clusters */
    reportsResponse: {
      clusters?: string[];
      errors?: string[] | null;
      generated_at?: string;
      reports?: {
        [key: string]: {
          analysis_metadata?: {
            execution_context?: string;
            /** Format: date-time */
            finish?: string;
            /** @example {
             *       "insights-core": {
             *         "commit": "placeholder",
             *         "version": "insights-core-3.0.176-1"
             *       }
             *     } */
            plugin_sets?: {
              [key: string]: {
                commit?: string | null;
                version?: string;
              };
            };
            /** Format: date-time */
            start?: string;
          };
          fingerprints?: string[];
          info?: components['schemas']['reportsComponent'][];
          reports?: components['schemas']['reportsComponent'][];
          skips?: {
            details?: string;
            reason?: string;
            rule_fqdn?: string;
            type?: string;
          }[];
          system?: {
            hostname?: string | null;
            metadata?: Record<string, never>;
          };
        };
      };
      status?: string;
    };
    ruleContent: {
      HasReason?: boolean;
      error_keys?: {
        [key: string]: components['schemas']['ruleContentErrorKey'];
      };
      generic?: string;
      more_info?: string;
      plugin?: components['schemas']['ruleContentPlugin'];
      reason?: string;
      resolution?: string;
      summary?: string;
    };
    ruleContentErrorKey: {
      HasReason?: boolean;
      generic?: string;
      metadata?: {
        description?: string;
        impact?: string;
        /** @enum {integer} */
        likelihood?: RuleContentErrorKeyMetadataLikelihood;
        publish_date?: string;
        status?: string;
        tags?: string[] | null;
      };
      more_info?: string;
      reason?: string;
      resolution?: string;
      summary?: string;
      /** @enum {integer} */
      total_risk?: RuleContentErrorKeyTotal_risk;
    };
    ruleContentPlugin: {
      name?: string;
      node_id?: string;
      product_code?: string;
      python_module?: string;
    };
  };
  responses: {
    /** @description Status ok */
    status: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          /** @example ok */
          status?: string;
        };
      };
    };
    /** @description Content service is unavailable */
    unavailable: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'text/plain': unknown;
      };
    };
  };
  parameters: {
    /**
     * @description ID of the cluster which must conform to UUID format.
     * @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266
     */
    clusterId: components['schemas']['clusterId'];
    /**
     * @description ID of the error key
     * @example ERROR_COOL_NAME
     */
    errorKey: string;
    /** @description If true, only OSD eligible rules will be sent. */
    osdEligible: boolean;
    /**
     * @description ID of a rule.
     * @example some.python.module
     */
    ruleId: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type ClusterId = components['schemas']['clusterId'];
export type OverviewResponse = components['schemas']['overviewResponse'];
export type ReportData = components['schemas']['reportData'];
export type ReportsComponent = components['schemas']['reportsComponent'];
export type ReportsResponse = components['schemas']['reportsResponse'];
export type RuleContent = components['schemas']['ruleContent'];
export type RuleContentErrorKey = components['schemas']['ruleContentErrorKey'];
export type RuleContentPlugin = components['schemas']['ruleContentPlugin'];
export type ResponseStatus = components['responses']['status'];
export type ResponseUnavailable = components['responses']['unavailable'];
export type ParameterClusterId = components['parameters']['clusterId'];
export type ParameterErrorKey = components['parameters']['errorKey'];
export type ParameterOsdEligible = components['parameters']['osdEligible'];
export type ParameterRuleId = components['parameters']['ruleId'];
export type $defs = Record<string, never>;
export interface operations {
  getReportsForClustersPost: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List of cluster IDs. Each ID must conform to UUID format. */
    requestBody: {
      content: {
        /** @example {"clusters": ["34c3ecc5-624a-49a5-bab8-4fdc5e51a266"]} */
        'application/json': {
          clusters?: components['schemas']['clusterId'][];
        };
      };
    };
    responses: {
      /** @description Latest available report for the given list of cluster IDs. Returns rules and their descriptions that were hit by the cluster. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['reportsResponse'];
        };
      };
      /** @description Invalid request, usually caused when some cluster belongs to different organization. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getReportForCluster: {
    parameters: {
      query?: {
        /** @description If true, only OSD eligible rules will be sent. */
        osd_eligible?: components['parameters']['osdEligible'];
        /** @description If true, disabled rules will be sent too. */
        get_disabled?: boolean;
      };
      header?: never;
      path: {
        /**
         * @description ID of the cluster which must conform to UUID format.
         * @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266
         */
        clusterId: components['parameters']['clusterId'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Latest available report for the given organization and cluster combination. Returns rules and their descriptions that were hit by the cluster. Disabled rules are ommitted by default unless the get_disabled query param is provided. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            report?: {
              data?: components['schemas']['reportData'][];
              /** @example {
               *       "count": 9,
               *       "last_checked_at": "2020-12-08T09:45:23Z"
               *     } */
              meta?: {
                /** Format: int32 */
                count?: number;
                /**
                 * Format: date-time
                 * @description [Optional] Timestamp of the last analysis
                 */
                last_checked_at?: string;
              };
            };
            /** @example ok */
            status?: string;
          };
        };
      };
      /** @description Resource not found, usually caused when the cluster ID is not registered and request come from Insights Operator. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getReportMetainfoForCluster: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description ID of the cluster which must conform to UUID format.
         * @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266
         */
        clusterId: components['parameters']['clusterId'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Metainformation about the latest available report for the given organization and cluster combination. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            metainfo?: {
              /**
               * Format: int32
               * @description Number of rules that were hit by the cluster. -1 is returned when no rules are defined for the cluster.
               * @example 1
               */
              count?: number;
              /**
               * Format: date-time
               * @description [Optional] Timestamp when the report has been produced.
               * @example 2020-01-23T16:15:59.478901889Z
               */
              last_checked_at?: string;
              /**
               * Format: date-time
               * @description Timestamp when the report has been written into database.
               * @example 2020-01-23T16:15:59.478901889Z
               */
              stored_at?: string;
            };
            /** @example ok */
            status?: string;
          };
        };
      };
    };
  };
  getSingleReportForCluster: {
    parameters: {
      query?: {
        /** @description If true, only OSD eligible rules will be sent. */
        osd_eligible?: components['parameters']['osdEligible'];
      };
      header?: never;
      path: {
        /**
         * @description ID of the cluster which must conform to UUID format.
         * @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266
         */
        clusterId: components['parameters']['clusterId'];
        /** @description ruleId and errorKey separated by "|" */
        ruleIdAndErrorKey: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Latest available rule report for the given organization, cluster combination and rule ID. Returns rule and it description that were hit by the cluster. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            report?: components['schemas']['reportData'];
            /** @example ok */
            status?: string;
          };
        };
      };
    };
  };
  disableRule: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description ID of the cluster which must conform to UUID format.
         * @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266
         */
        clusterId: components['parameters']['clusterId'];
        /**
         * @description ID of a rule.
         * @example some.python.module
         */
        ruleId: components['parameters']['ruleId'];
        /**
         * @description ID of the error key
         * @example ERROR_COOL_NAME
         */
        errorKey: components['parameters']['errorKey'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components['responses']['status'];
      /** @description Invalid request, usually caused when some cluster belongs to different organization. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resource not found, usually caused when the rule ID and error key combination doesn't exist in the content service */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  disableRuleFeedback: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description ID of the cluster which must conform to UUID format.
         * @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266
         */
        clusterId: components['parameters']['clusterId'];
        /**
         * @description ID of a rule.
         * @example some.python.module
         */
        ruleId: components['parameters']['ruleId'];
        /**
         * @description ID of the error key
         * @example ERROR_COOL_NAME
         */
        errorKey: components['parameters']['errorKey'];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': {
          message?: string;
        };
      };
    };
    responses: {
      /** @description Status ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example test */
            message?: string;
            /** @example ok */
            status?: string;
          };
        };
      };
      /** @description Invalid request, usually caused when some cluster belongs to different organization. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resource not found, usually caused when the rule ID and error key combination doesn't exist in the content service */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  addDislikeToRule: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description ID of the cluster which must conform to UUID format.
         * @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266
         */
        clusterId: components['parameters']['clusterId'];
        /**
         * @description ID of a rule.
         * @example some.python.module
         */
        ruleId: components['parameters']['ruleId'];
        /**
         * @description ID of the error key
         * @example ERROR_COOL_NAME
         */
        errorKey: components['parameters']['errorKey'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components['responses']['status'];
      /** @description Invalid request, usually caused when some cluster belongs to different organization. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resource not found, usually caused when the rule ID and error key combination doesn't exist in the content service */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  enableRule: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description ID of the cluster which must conform to UUID format.
         * @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266
         */
        clusterId: components['parameters']['clusterId'];
        /**
         * @description ID of a rule.
         * @example some.python.module
         */
        ruleId: components['parameters']['ruleId'];
        /**
         * @description ID of the error key
         * @example ERROR_COOL_NAME
         */
        errorKey: components['parameters']['errorKey'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components['responses']['status'];
      /** @description Invalid request, usually caused when some cluster belongs to different organization. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resource not found, usually caused when the rule ID and error key combination doesn't exist in the content service */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  addLikeToRule: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description ID of the cluster which must conform to UUID format.
         * @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266
         */
        clusterId: components['parameters']['clusterId'];
        /**
         * @description ID of a rule.
         * @example some.python.module
         */
        ruleId: components['parameters']['ruleId'];
        /**
         * @description ID of the error key
         * @example ERROR_COOL_NAME
         */
        errorKey: components['parameters']['errorKey'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components['responses']['status'];
      /** @description Invalid request, usually caused when some cluster belongs to different organization. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resource not found, usually caused when the rule ID and error key combination doesn't exist in the content service */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  resetVoteForRule: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description ID of the cluster which must conform to UUID format.
         * @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266
         */
        clusterId: components['parameters']['clusterId'];
        /**
         * @description ID of a rule.
         * @example some.python.module
         */
        ruleId: components['parameters']['ruleId'];
        /**
         * @description ID of the error key
         * @example ERROR_COOL_NAME
         */
        errorKey: components['parameters']['errorKey'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components['responses']['status'];
      /** @description Invalid request, usually caused when some cluster belongs to different organization. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resource not found, usually caused when the rule ID and error key combination doesn't exist in the content service */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getReportsForClusters: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description A comma separated list of cluster IDs. Each ID must conform to UUID format. An example: `34c3ecc5-624a-49a5-bab8-4fdc5e51a266.
         * @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266
         */
        clusterList: components['schemas']['clusterId'][];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Latest available report for the given list of cluster IDs. Returns rules and their descriptions that were hit by the cluster. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['reportsResponse'];
        };
      };
      /** @description Invalid request, usually caused when some cluster belongs to different organization. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getContent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A JSON object with the content. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            content?: components['schemas']['ruleContent'][];
            /** @example ok */
            status?: string;
          };
        };
      };
    };
  };
  getRuleGroups: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A JSON array of groups. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            groups?: {
              description?: string;
              tags?: string[];
              title?: string;
            }[];
            /** @example ok */
            status?: string;
          };
        };
      };
      /** @description Content service is unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': unknown;
        };
      };
    };
  };
  InfoEndpoint: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description An object containing information about Smart Proxy, Insights Results Aggregator, and Content Service. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            info?: {
              Aggregator?: {
                [key: string]: string;
              };
              ContentService?: {
                [key: string]: string;
              };
              SmartProxy?: {
                [key: string]: string;
              };
            };
            /** @example ok */
            status?: string;
          };
        };
      };
    };
  };
  getMetrics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Default response containing all metrics in semi-structured text format */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': unknown;
        };
      };
    };
  };
  getOpenApi: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A JSON containing the OpenAPI specification for this service. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            info?: {
              description?: string;
              title?: string;
              version?: string;
            };
            openapi?: string;
            /** @description Available paths and their descriptions. */
            paths?: Record<string, never>;
          };
        };
      };
    };
  };
  getOverviewForOrganization: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Summary of results by cluster */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['overviewResponse'];
        };
      };
    };
  };
  postOverviewForOrganization: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List of cluster IDs. Each ID must conform to UUID format. */
    requestBody: {
      content: {
        /** @example 34c3ecc5-624a-49a5-bab8-4fdc5e51a266 */
        'application/json': {
          clusters?: components['schemas']['clusterId'][];
        };
      };
    };
    responses: {
      /** @description Status ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['overviewResponse'];
        };
      };
    };
  };
  getClustersForOrganization: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the requested organization. */
        orgId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A JSON array of clusters that belong to the specified organization. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            clusters?: components['schemas']['clusterId'][];
            /** @example ok */
            status?: string;
          };
        };
      };
    };
  };
  getRuleIDs: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A JSON array of all the rule IDs. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            rules?: string[];
            /** @example ok */
            status?: string;
          };
        };
      };
    };
  };
  getContentForRule: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description ID of a rule.
         * @example some.python.module
         */
        ruleId: components['parameters']['ruleId'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A JSON object with the content. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            content?: components['schemas']['ruleContent'];
            /** @example ok */
            status?: string;
          };
        };
      };
      /** @description Rule ID is not available */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example Item not found in the storage */
            status?: string;
          };
        };
      };
      503: components['responses']['unavailable'];
    };
  };
}
export enum ReportDataTotal_risk {
  Value1 = 1,
  Value2 = 2,
  Value3 = 3,
  Value4 = 4,
}
export enum ReportDataUser_vote {
  ValueMinus1 = '-1',
  Value0 = '0',
  Value1 = '1',
}
export enum RuleContentErrorKeyMetadataLikelihood {
  Value0 = 0,
  Value1 = 1,
  Value2 = 2,
  Value3 = 3,
  Value4 = 4,
}
export enum RuleContentErrorKeyTotal_risk {
  Value0 = 0,
  Value1 = 1,
  Value2 = 2,
  Value3 = 3,
  Value4 = 4,
}
