import CreateRosaWizardPage from '../../pageobjects/CreateRosaWizard.page';
import CreateClusterPage from '../../pageobjects/CreateCluster.page';
import OverviewPage from '../../pageobjects/Overview.page';

const clusterFieldValidations = require('../../fixtures/rosa-hosted/RosaClusterHostedWizardValidation.json');
// awsAccountID,rolePrefix and installerARN are set by prerun script for smoke requirements.
const region = clusterFieldValidations.Region.split(',')[0];
const awsAccountID = Cypress.env('QE_AWS_ID');
const awsBillingAccountID = Cypress.env('QE_AWS_BILLING_ID');
const qeInfrastructure = Cypress.env('QE_INFRA_REGIONS')[region][0];
const rolePrefix = Cypress.env('QE_ACCOUNT_ROLE_PREFIX');
const installerARN = `arn:aws:iam::${awsAccountID}:role/${rolePrefix}-HCP-ROSA-Installer-Role`;
const clusterName = `smoke-cypress-rosa-hypershift-${(Math.random() + 1).toString(36).substring(7)}`;

describe('Rosa hosted(Hypershift) cluster wizard validations', { tags: ['smoke', 'hcp'] }, () => {
  before(() => {
    OverviewPage.viewAllOpenshiftClusterTypesLink().click();
    CreateClusterPage.isCreateClusterPageHeaderVisible();
  });

  it('Open Rosa cluster wizard', () => {
    CreateRosaWizardPage.rosaCreateClusterButton().click();
    CreateRosaWizardPage.rosaClusterWithWeb().should('be.visible').click();
    CreateRosaWizardPage.isCreateRosaPage();
    cy.get('.spinner-loading-text').should('not.exist');
  });

  it('Step - Control plane - widget validations', () => {
    CreateRosaWizardPage.isControlPlaneTypeScreen();
    CreateRosaWizardPage.rosaNextButton().should('not.be.disabled');
    CreateRosaWizardPage.rosaBackButton().should('be.disabled');
    CreateRosaWizardPage.rosaCancelButton().should('not.be.disabled');
    CreateRosaWizardPage.selectHostedControlPlaneTypeOption();
    CreateRosaWizardPage.rosaNextButton().click();
  });

  it('Step - Accounts and roles - widget validations', () => {
    CreateRosaWizardPage.isAccountsAndRolesScreen();
    CreateRosaWizardPage.selectAWSInfrastructureAccount(awsAccountID);
    CreateRosaWizardPage.waitForARNList();
    CreateRosaWizardPage.refreshInfrastructureAWSAccountButton().click();
    CreateRosaWizardPage.waitForARNList();
    CreateRosaWizardPage.selectAWSBillingAccount(awsBillingAccountID);
    CreateRosaWizardPage.selectInstallerRole(installerARN);
    CreateRosaWizardPage.rosaNextButton().click();
  });

  it('Step - Cluster Settings - Details - widget validations', () => {
    CreateRosaWizardPage.isClusterDetailsScreen();
    CreateRosaWizardPage.selectRegion(clusterFieldValidations.Region);
    CreateRosaWizardPage.setClusterName(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesValues[0],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesErrors[0],
    );
    CreateRosaWizardPage.setClusterName(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesValues[1],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesErrors[1],
    );
    CreateRosaWizardPage.setClusterName(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesValues[2],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesErrors[2],
    );
    CreateRosaWizardPage.setClusterName(clusterName);
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.createCustomDomainPrefixCheckbox().scrollIntoView().check();
    CreateRosaWizardPage.setDomainPrefix(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixValues[0],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixErrors[0],
    );
    CreateRosaWizardPage.setDomainPrefix(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixValues[1],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixErrors[1],
    );
    CreateRosaWizardPage.setDomainPrefix(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixValues[2],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixErrors[2],
    );
    CreateRosaWizardPage.createCustomDomainPrefixCheckbox().uncheck();
    CreateRosaWizardPage.advancedEncryptionLink().click();
    CreateRosaWizardPage.useCustomKMSKeyRadio().check();
    CreateRosaWizardPage.rosaNextButton().click({ force: true });
    CreateRosaWizardPage.isTextContainsInPage('Field is required.');
    CreateRosaWizardPage.inputCustomerManageKeyARN(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[0].WrongFormatValue,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[0].WrongFormatError,
    );
    CreateRosaWizardPage.inputCustomerManageKeyARN(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[1].WrongFormatWithWhitespace,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[1].WrongFormatWithWhitespaceError,
    );
    CreateRosaWizardPage.useDefaultKMSKeyRadio().check();
    CreateRosaWizardPage.enableAdditionalEtcdEncryptionCheckbox().check();
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage('Field is required.');
    CreateRosaWizardPage.inputEncryptEtcdKeyARN(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[0].WrongFormatValue,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[0].WrongFormatError,
    );
    CreateRosaWizardPage.inputEncryptEtcdKeyARN(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[1].WrongFormatWithWhitespace,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[1].WrongFormatWithWhitespaceError,
    );
    CreateRosaWizardPage.enableAdditionalEtcdEncryptionCheckbox().uncheck();
    CreateRosaWizardPage.rosaNextButton().should('not.be.disabled');
    CreateRosaWizardPage.rosaBackButton().should('not.be.disabled');
    CreateRosaWizardPage.rosaCancelButton().should('not.be.disabled');
    CreateRosaWizardPage.rosaNextButton().click();
  });

  it('Step - Cluster Settings - Machine pools - widget validations', () => {
    CreateRosaWizardPage.isClusterMachinepoolsScreen(true);
    cy.contains(`Select a VPC to install your machine pools into your selected region: ${region}`)
      .scrollIntoView()
      .should('be.visible');
    CreateRosaWizardPage.waitForVPCList();
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isClusterMachinepoolsScreen(true);
    CreateRosaWizardPage.selectVPC(qeInfrastructure.VPC_NAME);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.SubnetRequiredError,
    );
    CreateRosaWizardPage.selectMachinePoolPrivateSubnet(
      qeInfrastructure.SUBNETS.ZONES[clusterFieldValidations.MachinePools[0].AvailabilityZones]
        .PRIVATE_SUBNET_NAME,
      1,
    );
    CreateRosaWizardPage.addMachinePoolLink().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.SubnetRequiredError,
    );
    CreateRosaWizardPage.selectMachinePoolPrivateSubnet(
      qeInfrastructure.SUBNETS.ZONES[clusterFieldValidations.MachinePools[0].AvailabilityZones]
        .PRIVATE_SUBNET_NAME,
      2,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.DuplicateSubnetsError,
    );
    CreateRosaWizardPage.selectMachinePoolPrivateSubnet(
      qeInfrastructure.SUBNETS.ZONES[clusterFieldValidations.MachinePools[1].AvailabilityZones]
        .PRIVATE_SUBNET_NAME,
      2,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.DuplicateSubnetsError,
      false,
    );
    CreateRosaWizardPage.removeMachinePool(2);
    CreateRosaWizardPage.selectComputeNodeType(
      clusterFieldValidations.MachinePools[0].InstanceType,
    );
    CreateRosaWizardPage.enableAutoScaling();
    CreateRosaWizardPage.setMinimumNodeCount('0');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone.LowerLimitError,
    );
    CreateRosaWizardPage.setMinimumNodeCount('600');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone.UpperLimitError,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
    );
    CreateRosaWizardPage.setMinimumNodeCount('2');
    CreateRosaWizardPage.setMaximumNodeCount('600');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone.UpperLimitError,
    );
    CreateRosaWizardPage.setMaximumNodeCount('0');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone.LowerLimitError,
    );
    CreateRosaWizardPage.setMaximumNodeCount('2');
    CreateRosaWizardPage.minimumNodeCountPlusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
    );
    CreateRosaWizardPage.maximumNodeCountPlusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
      false,
    );
    CreateRosaWizardPage.maximumNodeCountMinusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
    );
    CreateRosaWizardPage.minimumNodeCountMinusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
      false,
    );
    // Check for validation errors in machine pool node counts fields after subnet changes.
    CreateRosaWizardPage.addMachinePoolLink().click();
    CreateRosaWizardPage.selectMachinePoolPrivateSubnet(
      qeInfrastructure.SUBNETS.ZONES[clusterFieldValidations.MachinePools[1].AvailabilityZones]
        .PRIVATE_SUBNET_NAME,
      2,
    );
    CreateRosaWizardPage.maximumNodeCountMinusButton().click();
    CreateRosaWizardPage.selectMachinePoolPrivateSubnet(
      qeInfrastructure.SUBNETS.ZONES[clusterFieldValidations.MachinePools[2].AvailabilityZones]
        .PRIVATE_SUBNET_NAME,
      2,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
    );
    CreateRosaWizardPage.minimumNodeCountMinusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone.LowerLimitError,
      false,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
      false,
    );
    // check for minimum and maximum node counts when both fields set to minimum value(i.e 1) per machine pool and overall machine pool count reduced to 1.
    CreateRosaWizardPage.removeMachinePool(2);
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
      false,
    );
    CreateRosaWizardPage.minimumNodeInput().should('have.value', '2');
    CreateRosaWizardPage.maximumNodeInput().should('have.value', '2');
    // check for minimum and maximum node count when both fields set to > minimum value(i.e 1) per machine pool and overall machine pool count reduced to 1.
    CreateRosaWizardPage.addMachinePoolLink().click();
    CreateRosaWizardPage.selectMachinePoolPrivateSubnet(
      qeInfrastructure.SUBNETS.ZONES[clusterFieldValidations.MachinePools[2].AvailabilityZones]
        .PRIVATE_SUBNET_NAME,
      2,
    );
    CreateRosaWizardPage.setMinimumNodeCount('3');
    CreateRosaWizardPage.removeMachinePool(2);
    CreateRosaWizardPage.minimumNodeInput().should('have.value', '3');
    CreateRosaWizardPage.maximumNodeInput().should('have.value', '2');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
    );

    // check for minimum and maximum node count, validation errors when minimum node count > maximum node count,maximum node count= minimum value(i.e 1) and overall machine pool count reduced to 1.
    CreateRosaWizardPage.addMachinePoolLink().click();
    CreateRosaWizardPage.selectMachinePoolPrivateSubnet(
      qeInfrastructure.SUBNETS.ZONES[clusterFieldValidations.MachinePools[1].AvailabilityZones]
        .PRIVATE_SUBNET_NAME,
      2,
    );
    CreateRosaWizardPage.addMachinePoolLink().click();
    CreateRosaWizardPage.selectMachinePoolPrivateSubnet(
      qeInfrastructure.SUBNETS.ZONES[clusterFieldValidations.MachinePools[2].AvailabilityZones]
        .PRIVATE_SUBNET_NAME,
      3,
    );
    CreateRosaWizardPage.setMinimumNodeCount('3');
    CreateRosaWizardPage.setMaximumNodeCount('1');
    CreateRosaWizardPage.removeMachinePool(2);
    CreateRosaWizardPage.removeMachinePool(2);
    CreateRosaWizardPage.minimumNodeInput().should('have.value', '3');
    CreateRosaWizardPage.maximumNodeInput().should('have.value', '2');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone.LowerLimitError,
      false,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
    );
    CreateRosaWizardPage.setMinimumNodeCount('2');
    CreateRosaWizardPage.setMinimumNodeCount('2');
  });
  it('Step - Machine pool- Root disk size - widget validations', () => {
    CreateRosaWizardPage.rootDiskSizeInput().type('{selectAll}').type('73');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.RootDiskSize.LimitError,
    );
    CreateRosaWizardPage.rootDiskSizeInput().type('{selectAll}').type('16385');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.RootDiskSize.LimitError,
    );
    CreateRosaWizardPage.rootDiskSizeInput().clear().type('{selectAll}').type('test');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.RootDiskSize.NonSupportedValue,
    );
    CreateRosaWizardPage.rootDiskSizeInput().clear().type('{selectAll}').type('555');
    CreateRosaWizardPage.rosaNextButton().click();
  });

  it('Step - Networking - Configuration - widget validations', () => {
    CreateRosaWizardPage.isNetworkingScreen();
    CreateRosaWizardPage.clusterPrivacyPublicRadio().should('be.checked');
    CreateRosaWizardPage.clusterPrivacyPrivateRadio().should('not.be.checked');
    CreateRosaWizardPage.selectClusterPrivacy('private');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.Configuration.Private.Warning,
    );
    CreateRosaWizardPage.selectClusterPrivacy(clusterFieldValidations.ClusterPrivacy);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.SubnetRequiredError,
    );
    CreateRosaWizardPage.selectMachinePoolPublicSubnet(
      qeInfrastructure.SUBNETS.ZONES[clusterFieldValidations.MachinePools[0].AvailabilityZones]
        .PUBLIC_SUBNET_NAME,
    );
    CreateRosaWizardPage.enableConfigureClusterWideProxy();
    CreateRosaWizardPage.rosaNextButton().click();
  });
  it('Step - Networking - Cluster-wide proxy -  widget validations', () => {
    CreateRosaWizardPage.isClusterWideProxyScreen();
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.httpProxyInput().blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.EmptyProxyError,
    );
    CreateRosaWizardPage.rosaNextButton().scrollIntoView();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.EmptyProxyValuesInformationText,
    );
    CreateRosaWizardPage.backToNetworkingConfigurationLink().should('be.visible').click();
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.httpProxyInput().type(
      clusterFieldValidations.Networking.ClusterProxy.InvalidHttpProxyValue,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.EmptyProxyError,
      false,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.EmptyProxyError,
      false,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.InvalidHttpProxyError,
    );
    CreateRosaWizardPage.httpProxyInput()
      .clear()
      .type(clusterFieldValidations.Networking.ClusterProxy.InvalidHttpProxyUrlValue);
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.InvalidHttpProxyUrlError,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.InvalidHttpProxyError,
      false,
    );
    CreateRosaWizardPage.httpProxyInput().type(
      clusterFieldValidations.Networking.ClusterProxy.ValidHttpProxyValue,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.InvalidHttpProxyUrlError,
      false,
    );
    CreateRosaWizardPage.httpsProxyInput()
      .clear()
      .type(clusterFieldValidations.Networking.ClusterProxy.InvalidHttpsProxyValue);
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.InvalidHttpsProxyError,
    );
    CreateRosaWizardPage.httpsProxyInput()
      .clear()
      .type(clusterFieldValidations.Networking.ClusterProxy.InvalidHttpsProxyUrlValue);
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.InvalidHttpsProxyError,
      false,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.InvalidHttpsProxyUrlError,
    );
    CreateRosaWizardPage.httpsProxyInput()
      .clear()
      .type(clusterFieldValidations.Networking.ClusterProxy.ValidHttpsProxyValue);
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.InvalidHttpsProxyUrlError,
      false,
    );
    CreateRosaWizardPage.noProxyDomainsInput().type(
      clusterFieldValidations.Networking.ClusterProxy.InvalidNoProxyDomainValue,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.InvalidNoProxyDomainError,
    );
    CreateRosaWizardPage.noProxyDomainsInput()
      .clear()
      .type(clusterFieldValidations.Networking.ClusterProxy.ValidNoProxyDomainValue);
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.ClusterProxy.InvalidNoProxyDomainError,
      false,
    );
    CreateRosaWizardPage.rosaNextButton().click();
  });
  it('Step - Networking - CIDR Ranges -  widget validations', () => {
    CreateRosaWizardPage.isCIDRScreen();
    CreateRosaWizardPage.useCIDRDefaultValues(false);
    CreateRosaWizardPage.machineCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[0].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[0].Error,
    );
    CreateRosaWizardPage.machineCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[1].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[1].Error,
    );
    CreateRosaWizardPage.machineCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[2].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
    );
    CreateRosaWizardPage.machineCIDRInput().clear().type('10.0.0.0/16');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
      false,
    );
    CreateRosaWizardPage.serviceCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[0].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[0].Error,
    );
    CreateRosaWizardPage.serviceCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[1].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[1].Error,
    );
    CreateRosaWizardPage.serviceCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[2].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
    );
    CreateRosaWizardPage.serviceCIDRInput().clear().type('172.30.0.0/16');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
      false,
    );
    CreateRosaWizardPage.podCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[0].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[0].Error,
    );
    CreateRosaWizardPage.podCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[1].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[1].Error,
    );
    CreateRosaWizardPage.podCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[2].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
    );
    CreateRosaWizardPage.podCIDRInput().clear().type('10.128.0.0/14');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
      false,
    );
    CreateRosaWizardPage.hostPrefixInput().clear().blur();
    CreateRosaWizardPage.isTextContainsInPage('Field is required');
    CreateRosaWizardPage.hostPrefixInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.HostPrefix[0].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.HostPrefix[0].Error,
    );
    CreateRosaWizardPage.hostPrefixInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.HostPrefix[1].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.HostPrefix[1].Error,
    );
    CreateRosaWizardPage.hostPrefixInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.HostPrefix[2].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.HostPrefix[2].Error,
    );
    CreateRosaWizardPage.hostPrefixInput().clear().type('/23');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.HostPrefix[2].Error,
      false,
    );
    CreateRosaWizardPage.useCIDRDefaultValues(true);
    CreateRosaWizardPage.rosaNextButton().click();
  });

  it('Step - Cluster roles and policies - widget validations', () => {
    CreateRosaWizardPage.isClusterRolesAndPoliciesScreen();
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterRolesAndPolicies.ConfigIdRequiredError,
    );
    CreateRosaWizardPage.selectOidcConfigId(clusterFieldValidations.OidcConfigId);
    CreateRosaWizardPage.customOperatorPrefixInput()
      .scrollIntoView()
      .type('{selectAll}')
      .type(
        clusterFieldValidations.ClusterRolesAndPolicies.OperatorRoles[0].UpperCharacterLimitValue,
      );
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterRolesAndPolicies.OperatorRoles[0].Error,
    );
    CreateRosaWizardPage.customOperatorPrefixInput()
      .scrollIntoView()
      .type('{selectAll}')
      .type(clusterFieldValidations.ClusterRolesAndPolicies.OperatorRoles[1].InvalidValue);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterRolesAndPolicies.OperatorRoles[1].Error,
    );
    CreateRosaWizardPage.customOperatorPrefixInput()
      .scrollIntoView()
      .type('{selectAll}')
      .type('test-123-test');
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.rosaCancelButton().click();
  });
});
