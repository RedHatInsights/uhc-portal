import ClusterListPage from '../../pageobjects/ClusterList.page';
import CreateRosaWizardPage from '../../pageobjects/CreateRosaWizard.page';
import LeaveCreateClusterPrompt from '../../pageobjects/LeaveCreateClusterPrompt';
import CreateClusterPage from '../../pageobjects/CreateCluster.page';
import OverviewPage from '../../pageobjects/Overview.page';

const clusterFieldValidations = require('../../fixtures/rosa/RosaClusterClassicWizardValidation.json');

// awsAccountID,rolePrefix and installerARN are set by prerun script for smoke requirements.
const awsAccountID = Cypress.env('QE_AWS_ID');
const rolePrefix = Cypress.env('QE_ACCOUNT_ROLE_PREFIX');
const installerARN = `arn:aws:iam::${awsAccountID}:role/${rolePrefix}-Installer-Role`;
const clusterName = `ocmui-cypress-smoke-rosa-${(Math.random() + 1).toString(36).substring(7)}`;

describe('Rosa Classic cluster wizard validations', { tags: ['smoke'] }, () => {
  before(() => {
    OverviewPage.viewAllOpenshiftClusterTypesLink().click();
    CreateClusterPage.isCreateClusterPageHeaderVisible();
  });

  it('Open Rosa cluster wizard', () => {
    CreateRosaWizardPage.rosaCreateClusterButton().click();
    CreateRosaWizardPage.rosaClusterWithWeb().should('be.visible').click();
    CreateRosaWizardPage.isCreateRosaPage();
    cy.get('.spinner-loading-text').should('not.exist');
  });

  it('Step - Control plane - widget validations', () => {
    CreateRosaWizardPage.isControlPlaneTypeScreen();
    CreateRosaWizardPage.rosaNextButton().should('not.be.disabled');
    CreateRosaWizardPage.rosaBackButton().should('be.disabled');
    CreateRosaWizardPage.rosaCancelButton().should('not.be.disabled');
    CreateRosaWizardPage.selectStandaloneControlPlaneTypeOption();
    CreateRosaWizardPage.rosaNextButton().click({ force: true });
  });

  it('Step - Accounts and roles - widget validations', () => {
    CreateRosaWizardPage.isAccountsAndRolesScreen();
    CreateRosaWizardPage.selectAWSInfrastructureAccount(awsAccountID);
    CreateRosaWizardPage.waitForARNList();
    CreateRosaWizardPage.refreshInfrastructureAWSAccountButton().click();
    CreateRosaWizardPage.waitForARNList();
    CreateRosaWizardPage.selectInstallerRole(installerARN);
    CreateRosaWizardPage.rosaNextButton().click({ force: true });
  });

  it('Step - Cluster Settings - widget validations', () => {
    CreateRosaWizardPage.setClusterName(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesValues[0],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesErrors[0],
    );
    CreateRosaWizardPage.setClusterName(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesValues[1],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesErrors[1],
    );
    CreateRosaWizardPage.setClusterName(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesValues[2],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidClusterNamesErrors[2],
    );
    CreateRosaWizardPage.setClusterName(clusterName);
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.createCustomDomainPrefixCheckbox().scrollIntoView().check();
    CreateRosaWizardPage.setDomainPrefix(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixValues[0],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixErrors[0],
    );
    CreateRosaWizardPage.setDomainPrefix(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixValues[1],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixErrors[1],
    );
    CreateRosaWizardPage.setDomainPrefix(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixValues[2],
    );
    CreateRosaWizardPage.closePopoverDialogs();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.InvalidDomainPrefixErrors[2],
    );
    CreateRosaWizardPage.createCustomDomainPrefixCheckbox().uncheck();
    CreateRosaWizardPage.advancedEncryptionLink().click();
    CreateRosaWizardPage.useCustomKMSKeyRadio().check();
    CreateRosaWizardPage.rosaNextButton().click({ force: true });
    CreateRosaWizardPage.isTextContainsInPage('Field is required.');
    CreateRosaWizardPage.inputCustomerManageKeyARN(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[0].WrongFormatValue,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[0].WrongFormatError,
    );
    CreateRosaWizardPage.inputCustomerManageKeyARN(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[1].WrongFormatWithWhitespace,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Details.KeyARNs[1].WrongFormatWithWhitespaceError,
    );
    CreateRosaWizardPage.useDefaultKMSKeyRadio().check();
    CreateRosaWizardPage.rosaNextButton().should('not.be.disabled');
    CreateRosaWizardPage.rosaBackButton().should('not.be.disabled');
    CreateRosaWizardPage.rosaCancelButton().should('not.be.disabled');
    CreateRosaWizardPage.rosaNextButton().click({ force: true });
  });

  it('Step - Cluster Settings - machine pool- Node count section - widget validations', () => {
    CreateRosaWizardPage.isClusterMachinepoolsScreen();
    CreateRosaWizardPage.enableAutoScaling();
    CreateRosaWizardPage.setMinimumNodeCount('0');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.SingleZone.LowerLimitError,
    );
    CreateRosaWizardPage.setMinimumNodeCount('500');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.SingleZone.UpperLimitError,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.SingleZone
        .MinAndMaxLimitDependencyError,
    );
    CreateRosaWizardPage.setMinimumNodeCount('2');
    CreateRosaWizardPage.setMaximumNodeCount('500');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.SingleZone.UpperLimitError,
    );
    CreateRosaWizardPage.setMaximumNodeCount('0');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.SingleZone.LowerLimitError,
    );
    CreateRosaWizardPage.setMaximumNodeCount('2');
    CreateRosaWizardPage.minimumNodeCountPlusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.SingleZone
        .MinAndMaxLimitDependencyError,
    );
    CreateRosaWizardPage.maximumNodeCountPlusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.SingleZone
        .MinAndMaxLimitDependencyError,
      false,
    );
    CreateRosaWizardPage.maximumNodeCountMinusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.SingleZone
        .MinAndMaxLimitDependencyError,
    );
    CreateRosaWizardPage.minimumNodeCountMinusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.SingleZone
        .MinAndMaxLimitDependencyError,
      false,
    );
    CreateRosaWizardPage.rosaBackButton().click();
    CreateRosaWizardPage.selectAvailabilityZone('Multi-zone');
    CreateRosaWizardPage.rosaNextButton().click({ force: true });
    CreateRosaWizardPage.setMinimumNodeCount('0');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone.LowerLimitError,
    );
    CreateRosaWizardPage.setMinimumNodeCount('500');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone.UpperLimitError,
    );
    CreateRosaWizardPage.setMaximumNodeCount('2');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
    );
    CreateRosaWizardPage.setMinimumNodeCount('2');
    CreateRosaWizardPage.setMaximumNodeCount('500');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone.UpperLimitError,
    );
    CreateRosaWizardPage.setMaximumNodeCount('0');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone.LowerLimitError,
    );
    CreateRosaWizardPage.setMaximumNodeCount('2');
    CreateRosaWizardPage.minimumNodeCountPlusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
    );
    CreateRosaWizardPage.maximumNodeCountPlusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
      false,
    );
    CreateRosaWizardPage.maximumNodeCountMinusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
    );
    CreateRosaWizardPage.minimumNodeCountMinusButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeCount.MultiZone
        .MinAndMaxLimitDependencyError,
      false,
    );
  });
  it('Step - Cluster Settings - machine pool- Cluster autoscaling section - widget validations', () => {
    CreateRosaWizardPage.disabledAutoScaling();
    CreateRosaWizardPage.enableAutoScaling();
    CreateRosaWizardPage.editClusterAutoscalingSettingsButton().click();
    CreateRosaWizardPage.clusterAutoscalingLogVerbosityInput().type('{selectAll}').type('0').blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.LogVerbosityLimitError,
    );
    CreateRosaWizardPage.clusterAutoscalingLogVerbosityInput().type('{selectAll}').type('7').blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.LogVerbosityLimitError,
    );
    CreateRosaWizardPage.clusterAutoscalingLogVerbosityInput().type('{selectAll}').type('3').blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.LogVerbosityLimitError,
      false,
    );
    CreateRosaWizardPage.clusterAutoscalingMaxNodeProvisionTimeInput().clear().blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.RequiredFieldError,
    );
    CreateRosaWizardPage.clusterAutoscalingMaxNodeProvisionTimeInput().clear().type('8H').blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidTimeValueError,
    );
    CreateRosaWizardPage.clusterAutoscalingMaxNodeProvisionTimeInput().clear().type('90k').blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidTimeValueError,
    );
    CreateRosaWizardPage.clusterAutoscalingMaxNodeProvisionTimeInput().clear().type('8s').blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidTimeValueError,
      false,
    );
    CreateRosaWizardPage.clusterAutoscalingBalancingIgnoredLabelsInput()
      .clear()
      .type('test with whitespace,test')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling
        .WhitespaceLabelValueError,
    );
    CreateRosaWizardPage.clusterAutoscalingBalancingIgnoredLabelsInput()
      .clear()
      .type('test,test,')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.EmptyLabelValueError,
    );
    CreateRosaWizardPage.clusterAutoscalingBalancingIgnoredLabelsInput()
      .clear()
      .type('test@434$,123,&test_(t)35435')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage('Empty labels are not allowed', false);
    CreateRosaWizardPage.clusterAutoscalingCoresTotalMinInput()
      .type('{selectAll}')
      .type('10')
      .blur();
    CreateRosaWizardPage.clusterAutoscalingCoresTotalMaxInput()
      .type('{selectAll}')
      .type('9')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.MinMaxLimitError,
    );
    CreateRosaWizardPage.clusterAutoscalingCoresTotalMinInput()
      .type('{selectAll}')
      .type('9')
      .blur();
    CreateRosaWizardPage.clusterAutoscalingCoresTotalMaxInput()
      .type('{selectAll}')
      .type('10')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.MinMaxLimitError,
      false,
    );
    CreateRosaWizardPage.clusterAutoscalingMemoryTotalMinInput()
      .type('{selectAll}')
      .type('10')
      .blur();
    CreateRosaWizardPage.clusterAutoscalingMemoryTotalMaxInput()
      .type('{selectAll}')
      .type('9')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.MinMaxLimitError,
    );
    CreateRosaWizardPage.clusterAutoscalingMemoryTotalMinInput()
      .type('{selectAll}')
      .type('9')
      .blur();
    CreateRosaWizardPage.clusterAutoscalingMemoryTotalMaxInput()
      .type('{selectAll}')
      .type('10')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.MinMaxLimitError,
      false,
    );
    CreateRosaWizardPage.clusterAutoscalingMaxNodesTotalInput().should('have.value', '255');
    CreateRosaWizardPage.clusterAutoscalingMaxNodesTotalInput()
      .type('{selectAll}')
      .type('257')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling
        .MaxNodesValueMultizoneLimitError,
    );

    CreateRosaWizardPage.clusterAutoscalingRevertAllToDefaultsButton().click();
    CreateRosaWizardPage.clusterAutoscalingCloseButton().click();
    CreateRosaWizardPage.rosaBackButton().click();
    CreateRosaWizardPage.selectAvailabilityZone('Single Zone');
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.disabledAutoScaling();
    CreateRosaWizardPage.enableAutoScaling();
    CreateRosaWizardPage.editClusterAutoscalingSettingsButton().click();
    CreateRosaWizardPage.clusterAutoscalingMaxNodesTotalInput().should('have.value', '254');
    CreateRosaWizardPage.clusterAutoscalingMaxNodesTotalInput()
      .type('{selectAll}')
      .type('255')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling
        .MaxNodesValueSinglezoneLimitError,
    );

    CreateRosaWizardPage.clusterAutoscalingRevertAllToDefaultsButton().click();
    CreateRosaWizardPage.clusterAutoscalingCloseButton().click();
    CreateRosaWizardPage.rosaBackButton().click();
    CreateRosaWizardPage.selectAvailabilityZone('Multi-zone');
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.disabledAutoScaling();
    CreateRosaWizardPage.enableAutoScaling();
    CreateRosaWizardPage.editClusterAutoscalingSettingsButton().click();
    CreateRosaWizardPage.clusterAutoscalingGPUsInput().type('{selectAll}').type('test').blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidGPUValueError,
    );
    CreateRosaWizardPage.clusterAutoscalingGPUsInput().type('{selectAll}').type('test:10:5').blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidGPUValueError,
    );
    CreateRosaWizardPage.clusterAutoscalingGPUsInput()
      .type('{selectAll}')
      .type('test:10:5,')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidGPUValueError,
    );
    CreateRosaWizardPage.clusterAutoscalingGPUsInput()
      .type('{selectAll}')
      .type('test:10:12,test:1:5')
      .blur();
    cy.get('div')
      .contains(
        clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidGPUValueError,
      )
      .should('not.exist');
    CreateRosaWizardPage.clusterAutoscalingScaleDownUtilizationThresholdInput()
      .type('{selectAll}')
      .type('1.5')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.ThreasholdLimitError,
    );
    CreateRosaWizardPage.clusterAutoscalingScaleDownUtilizationThresholdInput()
      .type('{selectAll}')
      .type('0.5')
      .blur();

    CreateRosaWizardPage.clusterAutoscalingScaleDownUnneededTimeInput()
      .type('{selectAll}')
      .type('7H')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidTimeValueError,
    );
    CreateRosaWizardPage.clusterAutoscalingScaleDownUnneededTimeInput()
      .type('{selectAll}')
      .type('7h')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidTimeValueError,
      false,
    );

    CreateRosaWizardPage.clusterAutoscalingScaleDownDelayAfterAddInput()
      .type('{selectAll}')
      .type('8Sec')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidTimeValueError,
    );
    CreateRosaWizardPage.clusterAutoscalingScaleDownDelayAfterAddInput()
      .type('{selectAll}')
      .type('8s')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidTimeValueError,
      false,
    );

    CreateRosaWizardPage.clusterAutoscalingScaleDownDelayAfterDeleteInput()
      .type('{selectAll}')
      .type('10milli')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidTimeValueError,
    );

    CreateRosaWizardPage.clusterAutoscalingScaleDownDelayAfterDeleteInput()
      .type('{selectAll}')
      .type('10s')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidTimeValueError,
      false,
    );

    CreateRosaWizardPage.clusterAutoscalingScaleDownDelayAfterFailureInput()
      .type('{selectAll}')
      .type('5M')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidTimeValueError,
    );

    CreateRosaWizardPage.clusterAutoscalingScaleDownDelayAfterFailureInput()
      .type('{selectAll}')
      .type('5m')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.ClusterAutoscaling.InvalidTimeValueError,
      false,
    );

    CreateRosaWizardPage.clusterAutoscalingRevertAllToDefaultsButton().click();
    CreateRosaWizardPage.clusterAutoscalingCloseButton().click();
  });
  it('Step - Cluster Settings - machine pool- Root disk size and node labels section - widget validations', () => {
    CreateRosaWizardPage.rootDiskSizeInput().type('{selectAll}').type('125');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.RootDiskSize.LimitError,
    );
    CreateRosaWizardPage.rootDiskSizeInput().type('{selectAll}').type('16385');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.RootDiskSize.LimitError,
    );
    CreateRosaWizardPage.rootDiskSizeInput().clear().type('{selectAll}').type('test');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.RootDiskSize.NonSupportedValue,
    );
    CreateRosaWizardPage.rootDiskSizeInput().clear().type('{selectAll}').type('555');
    CreateRosaWizardPage.editNodeLabelLink().click();
    CreateRosaWizardPage.addNodeLabelKeyAndValue(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[0].UpperCharacterLimitValue,
      'test',
      0,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[0].KeyError,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[0].LabelError,
      false,
    );
    CreateRosaWizardPage.addNodeLabelKeyAndValue(
      'test',
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[0].UpperCharacterLimitValue,
      0,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[0].KeyError,
      false,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[0].LabelError,
    );
    CreateRosaWizardPage.addNodeLabelKeyAndValue('test-t_123.com', 'test-t_123.com', 0);
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[0].KeyError,
      false,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[0].LabelError,
      false,
    );

    CreateRosaWizardPage.addNodeLabelKeyAndValue(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[1].InvalidValue,
      'test',
      0,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[1].KeyError,
    );
    CreateRosaWizardPage.addNodeLabelKeyAndValue(
      'testing',
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[1].InvalidValue,
      0,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[1].LabelError,
    );
    CreateRosaWizardPage.addNodeLabelKeyAndValue(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[2].InvalidValue,
      'test',
      0,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[2].KeyError,
    );
    CreateRosaWizardPage.addNodeLabelKeyAndValue('example12-ing.com/MyName', 'test-ing_123.com', 0);
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[0].KeyError,
      false,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[1].LabelError,
      false,
    );
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterSettings.Machinepool.NodeLabel[1].KeyError,
      false,
    );
    CreateRosaWizardPage.addAdditionalLabelLink().should('be.enabled');
    CreateRosaWizardPage.rosaNextButton().should('be.enabled');
    CreateRosaWizardPage.rosaBackButton().should('be.enabled');
    CreateRosaWizardPage.rosaCancelButton().should('be.enabled');
    CreateRosaWizardPage.rosaNextButton().click();
  });

  it('Step - Networking -  widget validations', () => {
    CreateRosaWizardPage.applicationIngressCustomSettingsRadio().check();
    CreateRosaWizardPage.applicationIngressRouterSelectorsInput()
      .clear()
      .type(
        clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
          .RouteSelector[0].UpperCharacterLimitValue,
      )
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
        .RouteSelector[0].Error,
    );
    CreateRosaWizardPage.applicationIngressRouterSelectorsInput()
      .clear()
      .type(
        clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
          .RouteSelector[1].InvalidValue,
      )
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
        .RouteSelector[1].Error,
    );
    CreateRosaWizardPage.applicationIngressRouterSelectorsInput()
      .clear()
      .type(
        clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
          .RouteSelector[2].InvalidValue,
      )
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
        .RouteSelector[2].Error,
    );
    CreateRosaWizardPage.applicationIngressRouterSelectorsInput()
      .clear()
      .type(
        clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
          .RouteSelector[3].InvalidValue,
      )
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
        .RouteSelector[3].Error,
    );
    CreateRosaWizardPage.applicationIngressRouterSelectorsInput()
      .clear()
      .type('valid123-k.com/Hello_world2')
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
        .RouteSelector[0].Error,
      false,
    );
    CreateRosaWizardPage.applicationIngressExcludedNamespacesInput()
      .clear()
      .type(
        clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
          .ExcludedNamespaces[0].UpperCharacterLimitValue,
      )
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
        .ExcludedNamespaces[0].Error,
    );
    CreateRosaWizardPage.applicationIngressExcludedNamespacesInput()
      .clear()
      .type(
        clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
          .ExcludedNamespaces[1].InvalidValue,
      )
      .blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
        .ExcludedNamespaces[1].Error,
    );
    CreateRosaWizardPage.applicationIngressExcludedNamespacesInput().clear().type('abc-123').blur();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.Configuration.IngressSettings.CustomSettings
        .ExcludedNamespaces[1].Error,
      false,
    );
    CreateRosaWizardPage.rosaNextButton().click();
  });

  it('Step - Networking - CIDR Ranges -  widget validations', () => {
    CreateRosaWizardPage.useCIDRDefaultValues(false);
    CreateRosaWizardPage.machineCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[0].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[0].Error,
    );
    CreateRosaWizardPage.machineCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[1].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[1].Error,
    );
    CreateRosaWizardPage.machineCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[2].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
    );
    CreateRosaWizardPage.machineCIDRInput().clear().type('10.0.0.0/16');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
      false,
    );
    CreateRosaWizardPage.serviceCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[0].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[0].Error,
    );
    CreateRosaWizardPage.serviceCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[1].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[1].Error,
    );
    CreateRosaWizardPage.serviceCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[2].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
    );
    CreateRosaWizardPage.serviceCIDRInput().clear().type('172.30.0.0/16');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
      false,
    );
    CreateRosaWizardPage.podCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[0].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[0].Error,
    );
    CreateRosaWizardPage.podCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[1].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[1].Error,
    );
    CreateRosaWizardPage.podCIDRInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.Common[2].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
    );
    CreateRosaWizardPage.podCIDRInput().clear().type('10.128.0.0/14');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.Common[2].Error,
      false,
    );
    CreateRosaWizardPage.hostPrefixInput().clear().blur();
    CreateRosaWizardPage.isTextContainsInPage('Field is required');
    CreateRosaWizardPage.hostPrefixInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.HostPrefix[0].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.HostPrefix[0].Error,
    );
    CreateRosaWizardPage.hostPrefixInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.HostPrefix[1].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.HostPrefix[1].Error,
    );
    CreateRosaWizardPage.hostPrefixInput()
      .clear()
      .type(clusterFieldValidations.Networking.CIDRRanges.HostPrefix[2].Value);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.HostPrefix[2].Error,
    );
    CreateRosaWizardPage.hostPrefixInput().clear().type('/23');
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.Networking.CIDRRanges.HostPrefix[2].Error,
      false,
    );
    CreateRosaWizardPage.useCIDRDefaultValues(true);
    CreateRosaWizardPage.rosaNextButton().click();
  });

  it('Step - Cluster roles and policies - widget validations', () => {
    CreateRosaWizardPage.customOperatorPrefixInput()
      .scrollIntoView()
      .type('{selectAll}')
      .type(
        clusterFieldValidations.ClusterRolesAndPolicies.OperatorRoles[0].UpperCharacterLimitValue,
      );
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterRolesAndPolicies.OperatorRoles[0].Error,
    );
    CreateRosaWizardPage.customOperatorPrefixInput()
      .scrollIntoView()
      .type('{selectAll}')
      .type(clusterFieldValidations.ClusterRolesAndPolicies.OperatorRoles[1].InvalidValue);
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.isTextContainsInPage(
      clusterFieldValidations.ClusterRolesAndPolicies.OperatorRoles[1].Error,
    );
    CreateRosaWizardPage.customOperatorPrefixInput()
      .scrollIntoView()
      .type('{selectAll}')
      .type('test-123-test');
    CreateRosaWizardPage.rosaNextButton().click();
    CreateRosaWizardPage.rosaCancelButton().click();
  });
});
