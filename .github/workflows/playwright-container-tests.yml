name: Playwright Container Tests

on:
  push:
    branches:
      - 'playwright-hacks'
  pull_request:
    branches:
      - 'playwright-hacks'
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to run tests on'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all
      base_url:
        description: 'Base URL for tests (e.g., https://console.dev.redhat.com/openshift/)'
        required: false
        default: 'https://console.dev.redhat.com/openshift/'
        type: string
      grep_tags:
        description: 'Test tags to run (e.g., @smoke, @ci, @smoke|@ci)'
        required: false
        default: '@smoke'
        type: string
      trace_level:
        description: 'Trace collection level'
        required: false
        default: 'off'
        type: choice
        options:
          - 'off'
          - 'on-first-retry'
          - 'retain-on-failure'
          - 'on'
      workers:
        description: 'Number of parallel workers'
        required: false
        default: '4'
        type: string

jobs:
  setup-dependencies:
    name: Setup Dependencies and Config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: './node_modules'
          key: playwright-container-${{ runner.os }}-22.x-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: |
          npm install -g yarn
          yarn install

      - name: Add hosts configuration
        run: make dev-env-setup

      - name: Cache setup artifacts
        uses: actions/cache@v4
        with:
          path: |
            ./node_modules
            /etc/hosts
          key: playwright-setup-${{ github.run_id }}

  playwright-container-tests:
    name: Playwright Container Tests (${{ inputs.grep_tags || '@smoke' }})
    needs: [setup-dependencies]
    runs-on: ubuntu-latest

    # Use the Docker container directly
    container:
      image: quay.io/openshifttest/ocmui-custom-playwright:1.54.2
      options: --shm-size=2g

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Install jq
        run: |
          echo "Installing jq..."
          apt-get update && apt-get install -y jq
          echo "jq version: $(jq --version)"

      - name: Restore cached dependencies and config
        uses: actions/cache@v4
        with:
          path: |
            ./node_modules
            /etc/hosts
          key: playwright-setup-${{ github.run_id }}

      - name: Recreate playwright.env.json from secret
        run: |
          echo "Recreating playwright.env.json in container job..."
          echo '${{ secrets.PLAYWRIGHT_ENV_JSON }}' > playwright.env.json

          # Add unique identifiers to avoid resource conflicts
          BUILD_ID="${{ github.run_id }}"

          # Add build identifier to avoid conflicts
          jq ". + {\"BUILD_IDENTIFIER\": \"${BUILD_ID}\"}" playwright.env.json > tmp.json && mv tmp.json playwright.env.json

          # Validate JSON using jq
          if jq empty playwright.env.json > /dev/null 2>&1; then
            echo "playwright.env.json recreated and validated successfully"
          else
            echo "ERROR: playwright.env.json is not valid JSON!"
            exit 1
          fi

      - name: Configure AWS CLI and setup cloud resources
        run: |
          echo "=== AWS CLI Configuration ==="
          echo "AWS CLI version: $(aws --version)"

          # Extract AWS credentials and region from playwright.env.json
          AWS_ACCESS_KEY_ID=$(jq -r '.QE_AWS_ACCESS_KEY_ID // empty' playwright.env.json)
          AWS_SECRET_ACCESS_KEY=$(jq -r '.QE_AWS_ACCESS_KEY_SECRET // empty' playwright.env.json)
          AWS_REGION=$(jq -r '.QE_AWS_REGION // "us-east-1"' playwright.env.json)

          echo "Using AWS region: $AWS_REGION"

          # Configure AWS CLI directly without exposing credentials in environment
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set region "$AWS_REGION"
          aws configure set output json

          # Verify AWS CLI can authenticate
          aws sts get-caller-identity || echo "AWS authentication check failed, but continuing..."

          # Setup AWS cloud resources
          echo "Setting up AWS cloud resources..."
          chmod +x ./create-vpc-infrastructure.sh
          ./create-vpc-infrastructure.sh

      - name: Configure ROSA CLI and setup roles
        run: |
          echo "=== ROSA CLI Configuration ==="
          echo "ROSA CLI version: $(rosa version)"

          # Extract ROSA configuration from playwright.env.json
          QE_ORGADMIN_CLIENT_ID=$(jq -r '.QE_ORGADMIN_CLIENT_ID // empty' playwright.env.json)
          QE_ORGADMIN_CLIENT_SECRET=$(jq -r '.QE_ORGADMIN_CLIENT_SECRET // empty' playwright.env.json)
          ENV_AUT=$(jq -r '.ENV_AUT // "staging"' playwright.env.json)
          QE_OCM_ROLE_PREFIX=$(jq -r '.QE_OCM_ROLE_PREFIX // "ocm-role"' playwright.env.json)
          QE_ACCOUNT_ROLE_PREFIX=$(jq -r '.QE_ACCOUNT_ROLE_PREFIX // empty' playwright.env.json)

          echo "Environment: $ENV_AUT"
          echo "Using service account authentication"

          # Login to ROSA using service account
          echo "Login via service account client definition"
          rosa login --client-id "$QE_ORGADMIN_CLIENT_ID" --client-secret "$QE_ORGADMIN_CLIENT_SECRET" --env "$ENV_AUT"

          # Unlink existing OCM roles
          linked_ocmrole=$(rosa list ocm-roles | awk '$3 == "Yes" { print $2 }')
          if [ ! -z "$linked_ocmrole" ]; then
            echo "Unlinking existing OCM role: $linked_ocmrole"
            rosa unlink ocm-role --role-arn "$linked_ocmrole" -y
          fi

          # Create OCM roles
          echo "Creating OCM roles with prefix: $QE_OCM_ROLE_PREFIX"
          ocmroles_success_msg=$(rosa create ocm-role --prefix "${QE_OCM_ROLE_PREFIX}" --mode auto --admin -y 2>&1)
          orphen_ocmroles=$(echo "$ocmroles_success_msg" | grep "unlink" | sed -n "s/.*\(arn:aws:iam::${TEST_QE_AWS_ID}:.*[0-9]\).*/\1/p")
          if [ ! -z "$orphen_ocmroles" ]; then
            echo "Unlinking orphaned OCM roles: $orphen_ocmroles"
            rosa unlink ocm-role --role-arn "$orphen_ocmroles" -y
            ocmroles_success_msg=$(rosa create ocm-role --prefix "${QE_OCM_ROLE_PREFIX}" --mode auto --admin -y)
          fi
          echo "$ocmroles_success_msg"

          # Create account roles
          if [ ! -z "$QE_ACCOUNT_ROLE_PREFIX" ]; then
            echo "Creating account roles with prefix: $QE_ACCOUNT_ROLE_PREFIX"
            rosa create account-roles --prefix "${QE_ACCOUNT_ROLE_PREFIX}" --mode auto -y
          fi

          echo "Completed ROSA pre-config commands!"

      - name: Verify container environment
        run: |
          echo "=== Container Environment ==="
          echo "Working directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Playwright version: $(npx playwright --version)"

          echo "=== Pre-installed Browsers Check ==="
          # Check if browsers are already installed in the container
          if command -v chromium-browser >/dev/null 2>&1; then
            echo "Chromium: $(chromium-browser --version)"
          fi
          if command -v firefox >/dev/null 2>&1; then
            echo "Firefox: $(firefox --version)"
          fi

          echo "=== Mounted Files Check ==="
          echo "Playwright config exists: $(test -f playwright.config.ts && echo 'YES' || echo 'NO')"
          echo "Playwright directory exists: $(test -d playwright && echo 'YES' || echo 'NO')"
          echo "Node modules exists: $(test -d node_modules && echo 'YES' || echo 'NO')"
          echo "Package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"
          echo "Playwright.env.json exists: $(test -f playwright.env.json && echo 'YES' || echo 'NO')"

      - name: Create artifacts directory
        run: |
          mkdir -p playwright-artifacts/results
          mkdir -p playwright-artifacts/reports

      - name: Run Playwright tests
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0
          BROWSER: ${{ inputs.browser || 'chromium' }}
          BASE_URL: ${{ inputs.base_url || 'https://console.dev.redhat.com/openshift/' }}
          CI: true
          PLAYWRIGHT_TRACE: ${{ inputs.trace_level || 'off' }}
        run: |
          # Run tests with specified parameters
          GREP_PATTERN="${{ inputs.grep_tags || '@smoke' }}"
          WORKERS="${{ inputs.workers || '4' }}"

          echo "=== Test Execution Parameters ==="
          echo "Running tests with pattern: $GREP_PATTERN"
          echo "Using browser: ${{ inputs.browser || 'chromium' }}"
          echo "Using base URL: ${{ inputs.base_url || 'https://console.dev.redhat.com/openshift/' }}"
          echo "Using $WORKERS parallel workers"
          echo "Trace level: ${{ inputs.trace_level || 'off' }}"
          echo ""

          # Execute tests
          npx playwright test --grep "$GREP_PATTERN" --workers="$WORKERS"

      - name: Display artifact summary
        if: always()
        run: |
          echo "=== Playwright Container Artifacts Summary ==="
          echo "Screenshots (failures only): $(find playwright-artifacts/results -name "*.png" 2>/dev/null | wc -l || echo "0")"
          echo "Videos (failures only): $(find playwright-artifacts/results -name "*.webm" 2>/dev/null | wc -l || echo "0")"
          echo "Traces (if enabled): $(find playwright-artifacts/results -name "trace.zip" 2>/dev/null | wc -l || echo "0")"
          echo "HTML Reports: $(find playwright-artifacts/reports -name "index.html" 2>/dev/null | wc -l || echo "0")"
          echo "Total artifact size: $(du -sh playwright-artifacts/ 2>/dev/null | cut -f1 || echo "0")"

          echo ""
          echo "=== Artifact Directory Structure ==="
          find playwright-artifacts -type f 2>/dev/null | head -20 || echo "No artifacts found"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-container-results-${{ github.run_id }}
          retention-days: 7
          path: playwright-artifacts/

      - name: Upload failure artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-container-failures-${{ github.run_id }}
          retention-days: 7
          path: playwright-artifacts/

      - name: Cleanup AWS cloud resources
        if: always()
        continue-on-error: true
        run: |
          echo "Cleaning up AWS cloud resources..."
          chmod +x ./create-vpc-infrastructure.sh
          ./create-vpc-infrastructure.sh --cleanup || echo "Cleanup completed with some warnings/errors, but continuing..."
