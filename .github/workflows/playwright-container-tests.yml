name: Playwright Container Tests

on:
  push:
    branches:
      - 'playwright-hacks'
  pull_request:
    branches:
      - 'playwright-hacks'
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to run tests on'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all
      base_url:
        description: 'Base URL for tests (e.g., https://console.dev.redhat.com/openshift/)'
        required: false
        default: 'https://console.dev.redhat.com/openshift/'
        type: string
      grep_tags:
        description: 'Test tags to run (e.g., @smoke, @ci, @smoke|@ci)'
        required: false
        default: '@smoke'
        type: string
      trace_level:
        description: 'Trace collection level'
        required: false
        default: 'off'
        type: choice
        options:
          - 'off'
          - 'on-first-retry'
          - 'retain-on-failure'
          - 'on'
      workers:
        description: 'Number of parallel workers'
        required: false
        default: '4'
        type: string

jobs:
  playwright-container-tests:
    name: Playwright Container Tests (${{ inputs.grep_tags || '@smoke' }})
    runs-on: ubuntu-latest

    env:
      PLAYWRIGHT_IMAGE: quay.io/openshifttest/ocmui-custom-playwright:1.54.2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install dependencies
        run: |
          npm install -g yarn
          yarn install

      - name: Create playwright.env.json from secret
        run: |
          echo "Creating playwright.env.json..."
          echo '${{ secrets.PLAYWRIGHT_ENV_JSON }}' > playwright.env.json

          # Add unique identifiers to avoid resource conflicts
          BUILD_ID="${{ github.run_id }}"

          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          else
            echo "jq already installed"
          fi

          # Add build identifier to avoid conflicts
          jq ". + {\"BUILD_IDENTIFIER\": \"${BUILD_ID}\"}" playwright.env.json > tmp.json && mv tmp.json playwright.env.json

          # Validate JSON using jq
          if jq empty playwright.env.json > /dev/null 2>&1; then
            echo "playwright.env.json is valid JSON"
          else
            echo "ERROR: playwright.env.json is not valid JSON!"
            exit 1
          fi

      - name: Add hosts configuration
        run: make dev-env-setup

      - name: Install AWS CLI
        run: |
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            rm -rf awscliv2.zip aws/
          else
            echo "AWS CLI already installed"
          fi
          aws --version

      - name: Install ROSA CLI
        run: |
          if ! command -v rosa &> /dev/null; then
            echo "Installing ROSA CLI..."
            curl -L https://mirror.openshift.com/pub/openshift-v4/clients/rosa/latest/rosa-linux.tar.gz -o rosa-linux.tar.gz
            tar -xzf rosa-linux.tar.gz
            sudo mv rosa /usr/local/bin/rosa
            sudo chmod +x /usr/local/bin/rosa
            rm -f rosa-linux.tar.gz
          else
            echo "ROSA CLI already installed"
          fi
          rosa version

      - name: Pull Docker image
        run: |
          echo "Checking Docker image: $PLAYWRIGHT_IMAGE"
          if ! docker image inspect $PLAYWRIGHT_IMAGE &> /dev/null; then
            echo "Pulling Docker image: $PLAYWRIGHT_IMAGE"
            docker pull $PLAYWRIGHT_IMAGE
          else
            echo "Docker image $PLAYWRIGHT_IMAGE already exists locally"
          fi

      - name: Configure AWS CLI and setup cloud resources
        run: |
          echo "=== AWS CLI Configuration ==="
          echo "AWS CLI version: $(aws --version)"

          # Extract AWS credentials and region from playwright.env.json
          AWS_ACCESS_KEY_ID=$(jq -r '.QE_AWS_ACCESS_KEY_ID // empty' playwright.env.json)
          AWS_SECRET_ACCESS_KEY=$(jq -r '.QE_AWS_ACCESS_KEY_SECRET // empty' playwright.env.json)
          AWS_REGION=$(jq -r '.QE_AWS_REGION // "us-east-1"' playwright.env.json)

          echo "Using AWS region: $AWS_REGION"

          # Configure AWS CLI directly without exposing credentials in environment
          echo "Configuring AWS CLI credentials..."
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID" 2>/dev/null
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" 2>/dev/null
          aws configure set region "$AWS_REGION"
          aws configure set output json
          echo "AWS CLI configuration completed"

          # Verify AWS CLI can authenticate
          if aws sts get-caller-identity >/dev/null 2>&1; then
            echo "AWS authentication successful"
          else
            echo "AWS authentication check failed, but continuing..."
          fi

          # Setup AWS cloud resources
          echo "Setting up AWS cloud resources..."
          chmod +x ./create-vpc-infrastructure.sh
          ./create-vpc-infrastructure.sh

      - name: Configure ROSA CLI and setup roles
        run: |
          echo "=== ROSA CLI Configuration ==="
          echo "ROSA CLI version: $(rosa version)"

          # Extract ROSA configuration from playwright.env.json
          QE_ORGADMIN_CLIENT_ID=$(jq -r '.QE_ORGADMIN_CLIENT_ID // empty' playwright.env.json)
          QE_ORGADMIN_CLIENT_SECRET=$(jq -r '.QE_ORGADMIN_CLIENT_SECRET // empty' playwright.env.json)
          ENV_AUT=$(jq -r '.ENV_AUT // "staging"' playwright.env.json)
          QE_OCM_ROLE_PREFIX=$(jq -r '.QE_OCM_ROLE_PREFIX // "ocm-role"' playwright.env.json)
          QE_ACCOUNT_ROLE_PREFIX=$(jq -r '.QE_ACCOUNT_ROLE_PREFIX // empty' playwright.env.json)

          echo "Environment: $ENV_AUT"
          echo "Using service account authentication"

          # Login to ROSA using service account
          echo "Login via service account client definition"
          rosa login --client-id "$QE_ORGADMIN_CLIENT_ID" --client-secret "$QE_ORGADMIN_CLIENT_SECRET" --env "$ENV_AUT" 2>/dev/null || {
            echo "ROSA login failed, but continuing..."
          }

          # Unlink existing OCM roles
          linked_ocmrole=$(rosa list ocm-roles | awk '$3 == "Yes" { print $2 }')
          if [ ! -z "$linked_ocmrole" ]; then
            echo "Unlinking existing OCM role: [MASKED]"
            rosa unlink ocm-role --role-arn "$linked_ocmrole" -y 2>/dev/null || echo "Failed to unlink OCM role"
          fi

          # Create OCM roles
          echo "Creating OCM roles with prefix: $QE_OCM_ROLE_PREFIX"
          ocmroles_success_msg=$(rosa create ocm-role --prefix "${QE_OCM_ROLE_PREFIX}" --mode auto --admin -y 2>&1)
          orphen_ocmroles=$(echo "$ocmroles_success_msg" | grep "unlink" | sed -n "s/.*\(arn:aws:iam::${TEST_QE_AWS_ID}:.*[0-9]\).*/\1/p")
          if [ ! -z "$orphen_ocmroles" ]; then
            echo "Unlinking orphaned OCM roles: [MASKED]"
            rosa unlink ocm-role --role-arn "$orphen_ocmroles" -y 2>/dev/null || echo "Failed to unlink orphaned OCM role"
            ocmroles_success_msg=$(rosa create ocm-role --prefix "${QE_OCM_ROLE_PREFIX}" --mode auto --admin -y 2>/dev/null)
          fi
          echo "OCM roles creation completed"

          # Create account roles
          if [ ! -z "$QE_ACCOUNT_ROLE_PREFIX" ]; then
            echo "Creating account roles with prefix: $QE_ACCOUNT_ROLE_PREFIX"
            rosa create account-roles --prefix "${QE_ACCOUNT_ROLE_PREFIX}" --mode auto -y
          fi

          echo "Completed ROSA pre-config commands!"

      - name: Create artifacts directory
        run: |
          mkdir -p playwright-artifacts/results
          mkdir -p playwright-artifacts/reports

      - name: Run Playwright tests in Docker
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0
          BROWSER: ${{ inputs.browser || 'chromium' }}
          BASE_URL: ${{ inputs.base_url || 'https://console.dev.redhat.com/openshift/' }}
          CI: true
          PLAYWRIGHT_TRACE: ${{ inputs.trace_level || 'off' }}
        run: |
          # Set container name with unique identifier
          CONTAINER_NAME="playwright-ocmui-${{ github.run_id }}"
          CONTAINER_WORKDIR="/usr/src/app"

          # Run tests with specified parameters
          GREP_PATTERN="${{ inputs.grep_tags || '@smoke' }}"
          WORKERS="${{ inputs.workers || '4' }}"

          echo "Running tests with pattern: $GREP_PATTERN"
          echo "Using browser: ${{ inputs.browser || 'chromium' }}"
          echo "Using base URL: ${{ inputs.base_url || 'https://console.dev.redhat.com/openshift/' }}"
          echo "Using $WORKERS parallel workers"
          echo "Container name: $CONTAINER_NAME"

          # Remove existing container with the same name, if any
          if docker container inspect "$CONTAINER_NAME" >/dev/null 2>&1; then
            echo "Removing existing container: $CONTAINER_NAME"
            docker rm -f "$CONTAINER_NAME"
          fi

          # Run the Docker container with all necessary mounts
          docker run \
            --name "$CONTAINER_NAME" \
            --workdir "$CONTAINER_WORKDIR" \
            --shm-size "2g" \
            --volume "$PWD/playwright.config.ts:$CONTAINER_WORKDIR/playwright.config.ts" \
            --volume "$PWD/playwright:$CONTAINER_WORKDIR/playwright" \
            --volume "$PWD/node_modules:$CONTAINER_WORKDIR/node_modules" \
            --volume "$PWD/playwright.env.json:$CONTAINER_WORKDIR/playwright.env.json" \
            --volume "$PWD/tsconfig.json:$CONTAINER_WORKDIR/tsconfig.json" \
            --volume "$PWD/playwright-artifacts:$CONTAINER_WORKDIR/playwright-artifacts" \
            --env "BASE_URL=${{ inputs.base_url || 'https://console.dev.redhat.com/openshift/' }}" \
            --env "BROWSER=${{ inputs.browser || 'chromium' }}" \
            --env "CI=true" \
            --env "PLAYWRIGHT_TRACE=${{ inputs.trace_level || 'off' }}" \
            --env "NODE_TLS_REJECT_UNAUTHORIZED=0" \
            $PLAYWRIGHT_IMAGE \
            npx playwright test --grep "$GREP_PATTERN" --workers="$WORKERS"

      - name: Copy test results from Docker container
        if: always()
        run: |
          CONTAINER_NAME="playwright-ocmui-${{ github.run_id }}"
          CONTAINER_WORKDIR="/usr/src/app"

          echo "Copying test results from Docker container..."

          # Copy artifacts from container to host
          # Results (screenshots, videos, traces)
          if docker exec "$CONTAINER_NAME" test -d "$CONTAINER_WORKDIR/playwright-artifacts/results" 2>/dev/null; then
            echo "Copying results directory..."
            docker cp "$CONTAINER_NAME:$CONTAINER_WORKDIR/playwright-artifacts/results" "./playwright-artifacts/"
          else
            echo "Results directory not found in container, creating empty directory"
            mkdir -p "./playwright-artifacts/results"
          fi

          # Reports (HTML reports)
          if docker exec "$CONTAINER_NAME" test -d "$CONTAINER_WORKDIR/playwright-artifacts/reports" 2>/dev/null; then
            echo "Copying reports directory..."
            docker cp "$CONTAINER_NAME:$CONTAINER_WORKDIR/playwright-artifacts/reports" "./playwright-artifacts/"
          else
            echo "Reports directory not found in container, creating empty directory"
            mkdir -p "./playwright-artifacts/reports"
          fi

          # Copy any additional artifacts that might be in the root playwright-artifacts directory
          if docker exec "$CONTAINER_NAME" test -d "$CONTAINER_WORKDIR/playwright-artifacts" 2>/dev/null; then
            echo "Copying any additional artifacts..."
            # Copy individual files in the artifacts directory (not subdirectories to avoid conflicts)
            docker exec "$CONTAINER_NAME" find "$CONTAINER_WORKDIR/playwright-artifacts" -maxdepth 1 -type f -exec basename {} \; | while read file; do
              if [ -n "$file" ]; then
                docker cp "$CONTAINER_NAME:$CONTAINER_WORKDIR/playwright-artifacts/$file" "./playwright-artifacts/"
              fi
            done
          fi

      - name: Display artifact summary
        if: always()
        run: |
          echo "=== Playwright Container Artifacts Summary ==="
          echo "Screenshots (failures only):"
          find playwright-artifacts/results -name "*.png" 2>/dev/null | wc -l || echo "0"
          echo "Videos (failures only):"
          find playwright-artifacts/results -name "*.webm" 2>/dev/null | wc -l || echo "0"
          echo "Traces (if enabled):"
          find playwright-artifacts/results -name "trace.zip" 2>/dev/null | wc -l || echo "0"
          echo "HTML Reports:"
          find playwright-artifacts/reports -name "index.html" 2>/dev/null | wc -l || echo "0"
          echo "Total artifact size:"
          du -sh playwright-artifacts/ 2>/dev/null || echo "No artifacts found"

          echo "=== Artifact Directory Structure ==="
          find playwright-artifacts -type f 2>/dev/null | head -20 || echo "No artifacts found"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-container-results-${{ github.run_id }}
          retention-days: 7
          path: playwright-artifacts/

      - name: Upload failure artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-container-failures-${{ github.run_id }}
          retention-days: 7
          path: playwright-artifacts/

      - name: Cleanup Docker container
        if: always()
        run: |
          CONTAINER_NAME="playwright-ocmui-${{ github.run_id }}"
          echo "Cleaning up Docker container: $CONTAINER_NAME"
          docker rm -f "$CONTAINER_NAME" || echo "Container already removed or doesn't exist"

      - name: Cleanup AWS cloud resources
        if: always()
        continue-on-error: true
        run: |
          echo "Cleaning up AWS cloud resources..."
          chmod +x ./create-vpc-infrastructure.sh
          ./create-vpc-infrastructure.sh --cleanup || echo "Cleanup completed with some warnings/errors, but continuing..."
